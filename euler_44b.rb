#!/usr/bin/env ruby1.9
# 
# Pentagonal numbers are generated by the formula, P_(n)=n(3nâˆ’1)/2.
# The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
# 
# Not terribly useful:
#   pent(2k)   => k*(6k-1)
#   pent(2k+1) => (2k+1)*(3k+1)
#   pent(a+b)  => 3(a^2+b^2)/2 + 3ab - (a+b)/2
#
# pent(a+1) - pent(a) => 3a + 1
#
# pent(a+b) +- pent(a) =>
#   (a+b)*(3*(a+b)-1)/2 +- a*(3*a-1)/2
#   a*(3*(a+b)-1)/2 + b*(3*(a+b)-1)/2 +- a*(3*a-1)/2
#   [ a*(3*(a+b)-1) +- a*(3*a-1) + b*(3*(a+b)-1) ] / 2
#   [ a*(3*a-1) +- a*(3*a-1) + 3*a*b + b*(3*(a+b)-1) ] / 2
# 
# pent(a+b) + pent(a) =>
#   [ 2 a*(3*a-1) + 3*a*b + b*(3*(a+b)-1) ] / 2
#
# pent(a+b) - pent(a) =>
#   [ 3*a*b + b*(3*(a+b)-1) ] / 2
#   b [ 3*(2a+b) - 1 ] / 2
# 
# More ideas:
#   pent(n)    => 3/2 (n - 1/6)**2 - 1/24
# 
# Sum test:
#   [pent(a) + pent(b)].pent?
#   [ (a - 1/6)**2 + 1/36 + (b - 1/6)**2  ].square?
#   (aa + bb - 2a/6 - 2b/6 + 9/36).square?
#
# For b, c \in Z+, when a, d \in Z+ ?
#  36(c-b)(c+b) - 12(c-b) + 1 => (6a - 1)**2
#  36(cc+bb)    - 12(c+b) + 3 => (6d - 1)**2


require "mathn"

class PentTester
  def initialize
    @last_i   = 0
    @last_val = 0
    @known    = {}
  end
  def pent?(x)
    while @last_val < x
      @last_i   += 1
      @last_val  = @last_i * (3*@last_i - 1) / 2
      @known[@last_val] = @last_i
    end
    @known[x]
  end
  def self.instance
    @pent ||= new
  end
end

class Float
  def round_error
    (round - self).abs
  end
  
  def almost_integer?
    round_error < 1e-6
  end
end

class Integer
  def pent?
    PentTester.instance.pent?(self)
  end
  def pent_b?
    ((Math.sqrt(24*self+1)+1)/6.0).almost_integer?
  end
end

def pent(n)
  n*(3*n-1)/2
end

def pents(n)
  (1..n).map{|i| pent(i)}
end

def pent_sum(a, b)
  (3*(a*a + b*b) - (a + b)) / 2
end

def pent_diff(a, b)
  s = (a+b)
  d = (a-b)
  (3*s - 1) * d / 2
end

def tests_one
  p10 = [1, 5, 12, 22, 35, 51, 70, 92, 117, 145]
  p pents(10) == p10
  p (1..1000).select(&:pent?) == pents(25)
  p (1..1000).select(&:pent_b?) == pents(25)
  p (1..150).select(&:pent?)  == p10
  p (1..20).all?{|i| (1..20).all?{|j| pent(i)+pent(j) == pent_sum(i, j) } }
  p (1..20).all?{|i| (1..20).all?{|j| pent(i)-pent(j) == pent_diff(i, j) } }
end

#tests_one

# NOTE: This doesn't really guarantee minimality just yet ...
(1..5000).each{|ai|
  a = pent(ai)
  (1..5000).each{|bi|
    b = pent(bi)
    c = a + b
    ci = c.pent?
    next unless ci
    puts [a, b, c].inspect
    d = b + c
    if d.pent?
      puts [a, b, c, d].inspect + "  " + [a, b, c, d].map(&:pent?).inspect
      exit
    end
  }
}

# 2000 -> 2s
# 5000 -> 14s
